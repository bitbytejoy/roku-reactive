<?xml version="1.0" encoding="utf-8" ?> 

<component name="ViewStack" extends="Scene">
  <script type="text/brightscript" uri="pkg:/util/logFunction.brs"/>
  <script type="text/brightscript" uri="pushEvent.brs"/>
  <script type="text/brightscript">
    <![CDATA[
    sub init()
      logFunction("ViewStack", "init")

      m.top.setFocus(true)
      m.top.backgroundURI = "pkg:/images/purplebg.jpg"

      m.stateTask = createObject("roSGNode", "StateTask")
      m.stateTask.control = "RUN"
      m.stateTask.observeField("appState", "onStateChanged")

      m.counter = m.top.findNode("counter")
      m.ip = m.top.findNode("ip")
      m.viewStack = []
      transitionTo(m.counter)
    end sub

    function onStateChanged() as void
      logFunction("ViewStack", "onStateChanged")
      view = m.viewStack.peek()
      if view <> invalid then
        view.appState = m.stateTask.appState
      end if
    end function

    function onKeyEvent(key as String, press as Boolean) as Boolean
      logFunction("ViewStack", "onKeyEvent")

      handled = false

      if press then
        if key = "right" then
          transitionTo(m.ip)
          handled = true
        else if key = "back" then
          pop()
          handled = true
        end if
      end if

      return handled
    end function

    function transitionTo(view) as void
      logFunction("ViewStack", "transitionTo", [ view.subtype() ])

      for each v in m.viewStack
        v.visible = false
      end for

      m.viewStack.push(view)
      view.appState = m.stateTask.appState
      view.visible = true
      view.setFocus(true)
    end function

    function pop() as void
      view = m.viewStack.pop()
      view.visible = false
      previousView = m.viewStack.peek()
      previousView.appState = m.stateTask.appState
      previousView.visible = true
      previousView.setFocus(true)
    end function

    function queueEvent(params as object) as void
      logFunction("ViewStack", "queueEvent", [ params ])
      pushEvent(m.stateTask, params)
    end function
    ]]>
  </script>

  <interface>
    <function name="queueEvent"/>
  </interface>

  <children>
    <Counter id="counter"/>
    <Ip id="ip" visible="false"/>
  </children>
</component>
